# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: badge
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-west-2
  versionFunctions: false
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        - sns:*
      Resource:
        - { "Fn::GetAtt": ["movementTable", "Arn"] }
        - {
            "Fn::Join":
              ["/", [{ "Fn::GetAtt": ["movementTable", "Arn"] }, "index", "*"]],
          }
        - { "Fn::GetAtt": ["movementStateTable", "Arn"] }
        - {
            "Fn::Join":
              [
                "/",
                [{ "Fn::GetAtt": ["movementStateTable", "Arn"] }, "index", "*"],
              ],
          }
        - { "Fn::GetAtt": ["voiceTable", "Arn"] }
        - {
            "Fn::Join":
              ["/", [{ "Fn::GetAtt": ["voiceTable", "Arn"] }, "index", "*"]],
          }
        - { "Fn::GetAtt": ["badgeMetaDataTable", "Arn"] }
        - {
            "Fn::Join":
              [
                "/",
                [{ "Fn::GetAtt": ["badgeMetaDataTable", "Arn"] }, "index", "*"],
              ],
          }
        - { "Fn::GetAtt": ["datasetMetaDataTable", "Arn"] }
        - {
            "Fn::Join":
              [
                "/",
                [
                  { "Fn::GetAtt": ["datasetMetaDataTable", "Arn"] },
                  "index",
                  "*",
                ],
              ],
          }
        - { "Fn::GetAtt": ["QRcodeTable", "Arn"] }
        - {
            "Fn::Join":
              ["/", [{ "Fn::GetAtt": ["QRcodeTable", "Arn"] }, "index", "*"]],
          }
        - { "Fn::GetAtt": ["nearMobilesTable", "Arn"] }
        - {
            "Fn::Join":
              [
                "/",
                [{ "Fn::GetAtt": ["nearMobilesTable", "Arn"] }, "index", "*"],
              ],
          }
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

functions:
  apis:
    handler: index.handler
    environment:
      STATE_MACHINE_ARN: { "Ref": "Hellostepfunc1StepFunctionsStateMachine" }
      MOVEMENT_TABLE_NAME: movementTable
      MOVEMENT_STATE_TABLE_NAME: movementStateTable
      VOICE_TABLE_NAME: voiceTable
      DATA_SET_META_DATA_TABLE_NAME: datasetMetaDataTable
      BADGE_META_DATA_TABLE_NAME: badgeMetaDataTable
      QRCODE_TABLE_NAME: QRcodeTable
      NEAR_MOBILES_TABLE_NAME: nearMobilesTable
    iamRoleStatementsInherit: true # lambda quanxian
    iamRoleStatements:
      - Effect: Allow
        Action:
          - states:*
        Resource:
          - "*"
    events:
      - http:
          path: /api/movement/{proxy+}
          method: GET
          cors: true
      - http:
          path: /api/movementState/{proxy+}
          method: GET
          cors: true
      - http:
          path: /api
          method: POST
          cors: true
      - http:
          path: /api/voice/{proxy+}
          method: GET
          cors: true
      - http:
          path: /api/datasetMetaData/{proxy+}
          method: GET
          cors: true
      - http:
          path: /api/badgeMetaData
          method: GET
          cors: true
      - http:
          path: /api/datasetMetaData
          method: GET
          cors: true
      - http:
          path: /api/badgeMetaData/{proxy+}
          method: GET
          cors: true
      - http:
          path: /api/nearMobiles/{proxy+}
          method: GET
          cors: true

  putmovement:
    handler: putmovement.handler
    environment:
      MOVEMENT_TABLE_NAME: movementTable
  putmovementstate:
    handler: putmovementstate.handler
    environment:
      MOVEMENT_STATE_TABLE_NAME: movementStateTable
  putvoice:
    handler: putvoice.handler
    environment:
      VOICE_TABLE_NAME: voiceTable
  putbadgemeta:
    handler: putbadgemeta.handler
    environment:
      BADGE_META_DATA_TABLE_NAME: badgeMetaDataTable
  putdatasetmeta:
    handler: putdatasetmeta.handler
    environment:
      DATA_SET_META_DATA_TABLE_NAME: datasetMetaDataTable
  putqrcode:
    handler: putqrcode.handler
    environment:
      QRCODE_TABLE_NAME: QRcodeTable
  putnearmobiles:
    handler: putnearmobiles.handler
    environment:
      NEAR_MOBILES_TABLE_NAME: nearMobilesTable
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

# resources: # CloudFormation template syntax
#   Resources:
#     movementTable:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: movementTable
#         AttributeDefinitions:
#           - AttributeName: badge_id
#             AttributeType: S
#         KeySchema:
#           - AttributeName: badge_id
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1

resources: # CloudFormation template syntax
  Resources:
    movementTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: movementTable
        AttributeDefinitions:
          - AttributeName: badge_id
            AttributeType: S
          - AttributeName: time_stamp
            AttributeType: N
        KeySchema:
          - AttributeName: badge_id
            KeyType: HASH
          - AttributeName: time_stamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    movementStateTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: movementStateTable
        AttributeDefinitions:
          - AttributeName: badge_id
            AttributeType: S
          - AttributeName: time_stamp
            AttributeType: N
        KeySchema:
          - AttributeName: badge_id
            KeyType: HASH
          - AttributeName: time_stamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    voiceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: voiceTable
        AttributeDefinitions:
          - AttributeName: badge_id
            AttributeType: S
          - AttributeName: time_stamp
            AttributeType: N
        KeySchema:
          - AttributeName: badge_id
            KeyType: HASH
          - AttributeName: time_stamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    badgeMetaDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: badgeMetaDataTable
        AttributeDefinitions:
          - AttributeName: badge_id
            AttributeType: S
          - AttributeName: dataset_id
            AttributeType: S
        KeySchema:
          - AttributeName: badge_id
            KeyType: HASH
          - AttributeName: dataset_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    datasetMetaDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: datasetMetaDataTable
        AttributeDefinitions:
          - AttributeName: dataset_id
            AttributeType: S
        KeySchema:
          - AttributeName: dataset_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    QRcodeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: QRcodeTable
        AttributeDefinitions:
          - AttributeName: badge_id
            AttributeType: S
          - AttributeName: time_stamp
            AttributeType: N
        KeySchema:
          - AttributeName: badge_id
            KeyType: HASH
          - AttributeName: time_stamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    nearMobilesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: nearMobilesTable
        AttributeDefinitions:
          - AttributeName: badge_id
            AttributeType: S
          - AttributeName: time_stamp
            AttributeType: N
        KeySchema:
          - AttributeName: badge_id
            KeyType: HASH
          - AttributeName: time_stamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

stepFunctions:
  stateMachines:
    hellostepfunc1:
      # events:
      #   - http:
      #       path: movement
      #       method: POST
      definition:
        Comment: "A Hello World example of the Amazon States Language using an AWS Lambda Function"
        StartAt: ChoiceState
        States:
          ChoiceState:
            Type: Choice
            Choices:
              - Variable: "$.type"
                StringEquals: Movement
                Next: PutMovementAll
              - Variable: "$.type"
                StringEquals: Voice
                Next: PutVoice
              - Variable: "$.type"
                StringEquals: BadgeMetadata
                Next: PutBadgeMeta
              - Variable: "$.type"
                StringEquals: DatasetMetadata
                Next: PutDatasetMeta
              - Variable: "$.type"
                StringEquals: QRcode
                Next: PutQRcode
              - Variable: "$.type"
                StringEquals: NearMobiles
                Next: PutNearMobiles

            Default: DefaultState
          PutMovementAll:
            Type: Parallel
            Branches:
              - StartAt: PutMovement
                States:
                  PutMovement:
                    Type: Task
                    Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-putmovement"
                    End: true
              - StartAt: PutMovementState
                States:
                  PutMovementState:
                    Type: Task
                    Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-putmovementstate"
                    End: true
            End: true
          PutVoice:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-putvoice"
            End: true
          PutBadgeMeta:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-putbadgemeta"
            End: true
          PutDatasetMeta:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-putdatasetmeta"
            End: true
          PutQRcode:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-putqrcode"
            End: true
          PutNearMobiles:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-putnearmobiles"
            End: true
          DefaultState:
            Type: Fail
            Cause: "No Matches!"

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function
